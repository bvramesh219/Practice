"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../base");
class WebContents extends base_1.EmitterBase {
    constructor(wire, identity, entityType) {
        super(wire, [entityType, identity.uuid, identity.name]);
        this.entityType = entityType;
    }
    executeJavaScript(code) {
        return this.wire.sendAction('execute-javascript-in-window', Object.assign({}, this.identity, { code }))
            .then(() => undefined);
    }
    getZoomLevel() {
        return this.wire.sendAction('get-zoom-level', this.identity).then(({ payload }) => payload.data);
    }
    setZoomLevel(level) {
        return this.wire.sendAction('set-zoom-level', Object.assign({}, this.identity, { level })).then(() => undefined);
    }
    navigate(url) {
        return this.wire.sendAction('navigate-window', Object.assign({}, this.identity, { url })).then(() => undefined);
    }
    navigateBack() {
        return this.wire.sendAction('navigate-window-back', Object.assign({}, this.identity)).then(() => undefined);
    }
    async navigateForward() {
        await this.wire.sendAction('navigate-window-forward', Object.assign({}, this.identity));
    }
    stopNavigation() {
        return this.wire.sendAction('stop-window-navigation', Object.assign({}, this.identity)).then(() => undefined);
    }
    reload(ignoreCache = false) {
        return this.wire.sendAction('reload-window', Object.assign({}, {
            ignoreCache
        }, this.identity)).then(() => undefined);
    }
}
exports.WebContents = WebContents;
//# sourceMappingURL=webcontents.js.map