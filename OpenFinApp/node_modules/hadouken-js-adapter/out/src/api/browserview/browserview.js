"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webcontents_1 = require("../webcontents/webcontents");
const base_1 = require("../base");
class BrowserViewModule extends base_1.Base {
    async create(options) {
        const uuid = this.wire.me.uuid;
        await this.wire.sendAction('create-browser-view', Object.assign({}, options, { uuid }));
        return this.wrapSync({ uuid, name: options.name });
    }
    wrapSync(identity) {
        return new BrowserView(this.wire, identity);
    }
}
exports.BrowserViewModule = BrowserViewModule;
class BrowserView extends webcontents_1.WebContents {
    constructor(wire, identity) {
        super(wire, identity, 'browserview');
        this.identity = identity;
        this.attach = async (target) => {
            await this.wire.sendAction('attach-browser-view', Object.assign({ target }, this.identity));
        };
        this.show = async (target) => {
            await this.wire.sendAction('show-browser-view', Object.assign({ target }, this.identity));
        };
        this.hide = async (target) => {
            await this.wire.sendAction('hide-browser-view', Object.assign({ target }, this.identity));
        };
        this.setBounds = async (bounds) => {
            await this.wire.sendAction('set-browser-view-bounds', Object.assign({ bounds }, this.identity));
        };
        this.getInfo = async () => {
            const ack = await this.wire.sendAction('get-browser-view-info', Object.assign({}, this.identity));
            return ack.payload.data;
        };
    }
}
exports.BrowserView = BrowserView;
//# sourceMappingURL=browserview.js.map